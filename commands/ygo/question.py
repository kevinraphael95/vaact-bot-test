import discord
from discord.ext import commands
import aiohttp
import random
import asyncio

# Emojis pour les choix de r√©ponse
REACTIONS = ["üá¶", "üáß", "üá®", "üá©"]

class Question(commands.Cog):
    def __init__(self, bot):
        self.bot = bot

    @commands.command(name="question")
    async def question(self, ctx):
        # Affiche dans la console quand la commande est d√©clench√©e
        print("‚úÖ Commande !question appel√©e")

        try:
            # Ouverture d'une session HTTP pour acc√©der √† l'API
            async with aiohttp.ClientSession() as session:
                # R√©cup√®re une carte al√©atoire (qui sera la bonne r√©ponse)
                async with session.get("https://db.ygoprodeck.com/api/v7/randomcard.php?language=fr") as r:
                    true_card = await r.json()

                # Liste des choix, la bonne r√©ponse d'abord
                choices = [true_card["name"]]

                # Ajoute 3 autres cartes al√©atoires (diff√©rentes)
                while len(choices) < 4:
                    async with session.get("https://db.ygoprodeck.com/api/v7/randomcard.php?language=fr") as r:
                        card = await r.json()
                        if card["name"] not in choices:
                            choices.append(card["name"])

            # M√©lange les choix pour ne pas savoir o√π est la bonne r√©ponse
            random.shuffle(choices)
            # Trouve l'index de la bonne r√©ponse dans la liste m√©lang√©e
            correct_index = choices.index(true_card["name"])

            # Cr√©ation de l'embed Discord qui affichera la question
            embed = discord.Embed(
                title="üîé Devine la carte !",
                color=discord.Color.blue()
            )

            # Ajoute des infos sur la carte, avec gestion des champs manquants
            embed.add_field(name="Type", value=true_card.get("type", "Inconnu"), inline=True)
            embed.add_field(name="ATK", value=str(true_card.get("atk", "‚Äî")), inline=True)
            embed.add_field(name="DEF", value=str(true_card.get("def", "‚Äî")), inline=True)
            embed.add_field(name="Niveau", value=str(true_card.get("level", "‚Äî")), inline=True)
            embed.add_field(name="Attribut", value=true_card.get("attribute", "‚Äî"), inline=True)
            embed.add_field(
                name="Description",
                value=true_card.get("desc", "‚Äî")[:300],  # Coupe √† 300 caract√®res
                inline=False
            )

            # Ajoute les choix sous forme de texte avec emoji
            options = "\n".join([f"{REACTIONS[i]} {name}" for i, name in enumerate(choices)])
            embed.add_field(name="Quel est le nom de cette carte ?", value=options, inline=False)

            # Envoie l'embed sur Discord
            msg = await ctx.send(embed=embed)

            # Ajoute les r√©actions (üá¶ √† üá©) pour voter
            for emoji in REACTIONS:
                await msg.add_reaction(emoji)

            # Fonction pour v√©rifier que la r√©action vient de la bonne personne
            def check(reaction, user):
                return (
                    user == ctx.author and
                    str(reaction.emoji) in REACTIONS and
                    reaction.message.id == msg.id
                )

            try:
                # Attend une r√©action pendant 30 secondes max
                reaction, _ = await self.bot.wait_for("reaction_add", timeout=30.0, check=check)
            except asyncio.TimeoutError:
                # Si personne ne r√©pond, envoie un message d‚Äôexpiration
                await ctx.send("‚è∞ Temps √©coul√© !")
                return

            # V√©rifie si l‚Äôemoji choisi est le bon index
            selected_index = REACTIONS.index(str(reaction.emoji))
            if selected_index == correct_index:
                await ctx.send(f"‚úÖ Bonne r√©ponse ! C'√©tait bien **{true_card['name']}**.")
            else:
                await ctx.send(f"‚ùå Mauvaise r√©ponse ! C'√©tait **{true_card['name']}**.")

        except Exception as e:
            # Si une erreur inattendue se produit, elle est affich√©e
            print(f"‚ùå Erreur pendant l'ex√©cution : {e}")
            await ctx.send("üö® Une erreur est survenue lors de la g√©n√©ration de la question.")

# Fonction pour enregistrer le cog aupr√®s du bot
async def setup(bot):
    await bot.add_cog(Question(bot))
